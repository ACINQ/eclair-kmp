package fr.acinq.lightning.serialization

import fr.acinq.bitcoin.Block
import fr.acinq.lightning.Feature
import fr.acinq.lightning.Lightning.randomKey
import fr.acinq.lightning.MilliSatoshi
import fr.acinq.lightning.channel.*
import fr.acinq.lightning.tests.TestConstants
import fr.acinq.lightning.tests.utils.LightningTestSuite
import fr.acinq.lightning.wire.CommitSig
import fr.acinq.lightning.wire.LightningMessage
import fr.acinq.secp256k1.Hex
import kotlinx.serialization.ExperimentalSerializationApi
import kotlin.math.max
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFails
import kotlin.test.assertTrue

class StateSerializationTestsCommon : LightningTestSuite() {

    @Test
    fun `serialize normal state`() {
        val (alice, bob) = TestsHelper.reachNormal()
        val bytes = Serialization.serialize(alice)
        val check = Serialization.deserialize(bytes, alice.staticParams.nodeParams)
        assertEquals(alice, check)

        val bytes1 = Serialization.serialize(bob)
        val check1 = Serialization.deserialize(bytes1, bob.staticParams.nodeParams)
        assertEquals(bob, check1)
    }

    @Test
    fun `encrypt - decrypt normal state`() {
        val (alice, bob) = TestsHelper.reachNormal()
        val priv = randomKey().value
        val bytes = Serialization.encrypt(priv, alice)
        val check = Serialization.decrypt(priv, bytes, alice.staticParams.nodeParams)
        assertEquals(alice, check)

        val bytes1 = Serialization.encrypt(priv, bob)
        val check1 = Serialization.decrypt(priv, bytes1, bob.staticParams.nodeParams)
        assertEquals(bob, check1)
    }

    @Test
    fun `don't restore data from a different chain`() {
        val (alice, _) = TestsHelper.reachNormal()
        val priv = randomKey().value
        val bytes = Serialization.encrypt(priv, alice)
        val check = Serialization.decrypt(priv, bytes, alice.staticParams.nodeParams)
        assertEquals(alice, check)

        // we cannot test the exception's error message anymore because v2 serialization will fail (invalid chain) then we'll try v1 serialization which will return a different error
        assertFails {
            Serialization.decrypt(priv, bytes, alice.staticParams.nodeParams.copy(chainHash = Block.LivenetGenesisBlock.hash))
        }
    }

    @Test
    fun `backwards compatibility test`() {
        val bin = Hex.decode(
            "0000000300001d0b0000002a66722e6163696e712e6c696768746e696e672e73657269616c697a6174696f6e2e76332e4e6f726d616c0000002006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f000000210362b19a83930389b4468be40308efb3f352b23142ae25e6aba0465a8220f95b0600061a800000000b426c6f636b486561646572000000500100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff7f2002000000000000000000271000000000000027100000000000002710000000010100000011050000000000000000000000000014100000000021037108815ff0128f7ed22640485c226d9ad64a9fd6d8b41b6623565aed6b34812c000000090000000037beb3e000000000087938d9000000002cafc5980000000074f7340f000000006f4d1dab0000000075e41f7d0000000084d72e9000000000bfc3841c0000000080000001000000000000044c0000000059682f000000000000002710000000000000000000000090000000640100000016001405e0104aa726e34ff5cd3a6320d05c0862b5b01c000000110000002d66722e6163696e712e6c696768746e696e672e466561747572652e496e697469616c526f7574696e6753796e63010000003066722e6163696e712e6c696768746e696e672e466561747572652e4f7074696f6e446174614c6f737350726f74656374010000002e66722e6163696e712e6c696768746e696e672e466561747572652e4368616e6e656c52616e676551756572696573010000003666722e6163696e712e6c696768746e696e672e466561747572652e4368616e6e656c52616e676551756572696573457874656e646564010000002e66722e6163696e712e6c696768746e696e672e466561747572652e5661726961626c654c656e6774684f6e696f6e000000002866722e6163696e712e6c696768746e696e672e466561747572652e5061796d656e74536563726574000000003066722e6163696e712e6c696768746e696e672e466561747572652e42617369634d756c7469506172745061796d656e74010000002066722e6163696e712e6c696768746e696e672e466561747572652e57756d626f010000002a66722e6163696e712e6c696768746e696e672e466561747572652e53746174696352656d6f74654b6579000000002866722e6163696e712e6c696768746e696e672e466561747572652e416e63686f724f757470757473000000002666722e6163696e712e6c696768746e696e672e466561747572652e4368616e6e656c54797065000000002a66722e6163696e712e6c696768746e696e672e466561747572652e5061796d656e744d65746164617461010000003866722e6163696e712e6c696768746e696e672e466561747572652e4578706572696d656e74616c5472616d706f6c696e655061796d656e74010000003566722e6163696e712e6c696768746e696e672e466561747572652e57616b6555704e6f74696669636174696f6e50726f7669646572010000002c66722e6163696e712e6c696768746e696e672e466561747572652e506179546f4f70656e50726f7669646572010000003066722e6163696e712e6c696768746e696e672e466561747572652e5472757374656453776170496e50726f7669646572010000003066722e6163696e712e6c696768746e696e672e466561747572652e4368616e6e656c4261636b757050726f76696465720100000000000000210362b19a83930389b4468be40308efb3f352b23142ae25e6aba0465a8220f95b0600000000000003e80000000059682f000000000000004e2000000000000003e8000000900000006400000021029f3a238820703a5318b3669b012bd52f9b95f8bc3e5c4f7298e02fa9ddeb5b210000002102df9dbcd57d787a1bf6c3b26b651c7a0de7fc66fd96c127a484f452dd5f4af1a20000002103131219e622423c3bd67bc0af07718902f1ba97976e8d2d0ea8eeec4d442c0aa600000021022cc1983f58c02bb2ff2018dd97560b035ccdea7fc6854f18e21b84e113cc5b7300000021039449ec14b13319bcff80bea6b5646e45c72f4d350654eeb4aa84d5e0679a6ece000000110000003066722e6163696e712e6c696768746e696e672e466561747572652e4f7074696f6e446174614c6f737350726f74656374010000002d66722e6163696e712e6c696768746e696e672e466561747572652e496e697469616c526f7574696e6753796e63010000002e66722e6163696e712e6c696768746e696e672e466561747572652e4368616e6e656c52616e676551756572696573010000002e66722e6163696e712e6c696768746e696e672e466561747572652e5661726961626c654c656e6774684f6e696f6e000000003666722e6163696e712e6c696768746e696e672e466561747572652e4368616e6e656c52616e676551756572696573457874656e646564010000002a66722e6163696e712e6c696768746e696e672e466561747572652e53746174696352656d6f74654b6579000000002866722e6163696e712e6c696768746e696e672e466561747572652e5061796d656e74536563726574000000003066722e6163696e712e6c696768746e696e672e466561747572652e42617369634d756c7469506172745061796d656e74010000002066722e6163696e712e6c696768746e696e672e466561747572652e57756d626f010000002866722e6163696e712e6c696768746e696e672e466561747572652e416e63686f724f757470757473000000002666722e6163696e712e6c696768746e696e672e466561747572652e4368616e6e656c54797065000000002a66722e6163696e712e6c696768746e696e672e466561747572652e5061796d656e744d65746164617461010000003366722e6163696e712e6c696768746e696e672e466561747572652e57616b6555704e6f74696669636174696f6e436c69656e74010000002a66722e6163696e712e6c696768746e696e672e466561747572652e506179546f4f70656e436c69656e74010000002e66722e6163696e712e6c696768746e696e672e466561747572652e5472757374656453776170496e436c69656e74010000002e66722e6163696e712e6c696768746e696e672e466561747572652e4368616e6e656c4261636b7570436c69656e74010000003866722e6163696e712e6c696768746e696e672e466561747572652e4578706572696d656e74616c5472616d706f6c696e655061796d656e740100000000000000000000000000000000000000000000001388000000002faf0800000000000bebc200000000084f7574506f696e7400000024be9b930a1c87f0bdf6bfac83cb1d93f42b95d9d0b31ca22acbdb16b56e34fc2c000000000000000554784f75740000002b40420f00000000002200200f947b10532e20e38907cf32ee13bbe062eafddb319096f96c10cc00961c67f9000000475221029f3a238820703a5318b3669b012bd52f9b95f8bc3e5c4f7298e02fa9ddeb5b212103d32d9b9ed06e93e57555444ca67bce7e467a5db1a06ede0ca0d03cab579437fa52ae0000000b5472616e73616374696f6e000001bc02000000000101be9b930a1c87f0bdf6bfac83cb1d93f42b95d9d0b31ca22acbdb16b56e34fc2c00000000001ba36f80044a010000000000002200208e530d01c85a4f564b2a74eb66b5b4d3105863f0a6278661a2bc36f0cb836a144a01000000000000220020fd84334e44d29d34836caea2ee455cc8de9d1fa37420098d2aba649869520264400d030000000000220020bf5b87cc55c57451e32cd36b366d395a7162ad7cf49d05231e35ea3c19cc3e22781c0c0000000000220020e3685f4374dda215780748848b2b66c250af8d50a4d5c0db91cc2bf62d9638290400483045022100d99e69d81b61e72ad9a4dd97a5c14ca8692aee2cad7544d6d469f3641c9ee5f002203db9668c0f91e949e49bf84f12a067e742d45ab8b972daf8f43cd5646ed541a50147304402202ce10a1992c42bb398bbdda3640b8fa3703faf67ab72d2c5420217f04f4b287102206c16ee8d539591775eccefc76a904adb8524beca9d28fb59674fe5dd753051ab01475221029f3a238820703a5318b3669b012bd52f9b95f8bc3e5c4f7298e02fa9ddeb5b212103d32d9b9ed06e93e57555444ca67bce7e467a5db1a06ede0ca0d03cab579437fa52ae1e292520000000000000000000000000000000000000000000001388000000000bebc200000000002faf08000000002072c6760a6547e414b2815c2b164da6d9c6fd327242b854f8cd2e0787b29672860000002102433a58dd4c75825d454b769de0aa38765ca6721d8b6874d1db10db86c18a85bc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100010000002102d886b8f92e36cfe5b402fcaa82e0107b70d73de52584d4f08bd92b766fd088ca000000084f7574506f696e7400000024be9b930a1c87f0bdf6bfac83cb1d93f42b95d9d0b31ca22acbdb16b56e34fc2c000000000000000554784f75740000002b40420f00000000002200200f947b10532e20e38907cf32ee13bbe062eafddb319096f96c10cc00961c67f9000000475221029f3a238820703a5318b3669b012bd52f9b95f8bc3e5c4f7298e02fa9ddeb5b212103d32d9b9ed06e93e57555444ca67bce7e467a5db1a06ede0ca0d03cab579437fa52ae000000000000000020be9b930a1c87f0bdf6bfac83cb1d93f42b95d9d0b31ca22acbdb16b56e34fc2c00000e86a42904cfd2483928ce775091e53737bc27871d3809db00c57c4ba8319f7d837725eada77cf8020c156136783b91588ea4d3969f68b4b1c79c61e6884f32f2f2f8e95187c74546678e71815e2cbdc74424990dfe7502879baa588f3d500c6f009166c1007ebff93140ac205f08c3fd0e0f24d2bf018906823539373f04698dc87c9ab2d8aced00f68267ebe5eddbe1be730a9736edee0becc4d44451ac8b5a3e25efcb85b146a3e7278971bd16c299ec2839c1ea96b08d1c4ae5c6ae750a444e1a509e082023992682b38d71c07ffd48df093fc13b02c35a00b9c17a31399a619ea4806f94d43cbc9649fcb05eb32fdb0882c7387bc6fce32c08257fde3989a86d723e721a3a39a36bc2dd4a2a7f9a002700441abb804316c5c2a7b1f09140a6beb6d0c251f811190587a53441d5d1f9d810b67c6681c5922be0a4f885752767d77704c6dac8d262c4d8d0d112358e99d36e020698311ae3b1830ad5fdbd5a376d9c5e33ae5eb82a8b6a29b68719b2a7d48a177167d8794707851e70d65c66e1c623ad82c9e6c90831ff68b8bf98d4aa2e4122c47a04f0c431ca4029b412b5fe0be7b9a98064121bd5cb20aae1af608df99c6dd933c9e6dbb8e12920ab72e9e721a8f711be83ba257ff391117cedad6229d4ec0abb8ff54537b4b0e19b31c5ded7a7dde7fc08e84bb72e59f1bbee85349b06cbac6ea1f08c62c4df04ce41193ca69a63ba263d787287fa29857086383baa7716019c2d4d155c1cbb6c98457dbd23d44d8614f25f9373ea843281b9f1f297a0bd9fd89c58709d53ad82675049d509b73f2127bb8dc2c4483656b3e4c0eab1a65783d8a853e5a8cc46c229f78e139839154995c4671f41c0198f38fd8d83b36b25257dc974561a6034afae89331a4637c0cf8e1652aa96bb05b947b8f67730cdca314e83ffc8fbb9e622380c60840127a1c82d6e75edf76a320c2dff5df0d5747436789711dc242553f511a5a4e00435da0c0a3c30f08b2a2a021c298bdc21bbc2f8a245d3cea25e68670dc005b140a57775ff906ab24d3b5735ffe11ef314bb165b7395e59a4cc356e3ebda59a61b01d170fc1030d7d75546d0bde922e90c35a144412de3fc2be98848949e82762387641dd88b957d9fb51c1deb31c062cad88afd4225e9b67bfbd9dddce76dffbb47fb7296a17a92b5f99b2a68cb54e747a317fb53f04c1cd9e7e76c1affff27eec249bb1a1c504578ee602d2940fcf63a058468a452408b2f5b72ce6054e83162d1b7c3adc2f0100bb54ebbab0c80c489586295bd344a82db5214e5362aea8f1baebdeb491d7d293cf998917655b995f80e7e3a981712ce8c469ecc29650ed460b4ba0773d41b262736c64ba54774159416e246a2da1136ed969244d397509c2b58e322c6fa49aa53b11c628c78e91af369f3a0df6c4b0795e79f82a368ad66207b333f1326743d6f4943f41fb2ca814a8434fa95edb5b9768d0d1e9544426a7ccd02305649fac9928e9be1b36c24fdb3b7ddee8461fad227a6471a58fda9e1f1cea1eba24032e189573c69d6f2124684bbcfa834cdfee0b0048aac7629002b2de96594bb374925ef16b4c9455bfda09adade58702b869ffe1641931bcb99e1dd6fa1f89a6479eaa94861ac2bf4fe8fc03cd8295700a18aca5e884b701b7b2d97cd33835741486e0213fd6e18da0c6c52f068cf5f3f8918c8765dcd6bd9ee90bbe8a1647d888201833d8ea10ab4d3e7a470193c179bf5a91918eed755f7d50e95a82991029e4c70d4a3a00fef0fe87cfa2a49e597e1259b33f890a73f2340540af3b15477f03f3db89d814a57742418f5cbb2ba93c84631ce92afdc17d07fb5d2061fa029d883f7c9ffa5e63469f28de92eeb997fb14de58b94058026109933f9c5a0c37526df5d8a153b5fd0112c2d58e3a7e82553f9fd8bf70cb437f27c17396931a7e6a463704a38d5a5b0cf7eb29a1debcfcb115dd0d7f505ef310d878ad712e72f681d7f3f94682a388806e12c72333676b73b11692e644f70a7e0129d68d7e73c62b7b1f71c167a065053b8690cd070f58e015cf3d9568e9f2587a72bbf19d4bcf332491d4b6ca3199ad446fe2b9b4ea294fa6f1f0705f7267326733e2f32363a42af0341c541ffd6b504104935680bce8c7d9d00ff09dc919053257427e07e4708d6ce20f2d3bc4ad19f71b49a53648c8e60f9f2b7725b31e8a69441272e30155667a03da8b71cc3214c09b173627a50e5159af641ef64a0ff106075aa1999de09590216731f65cff858bf4e1027abe59b535766487e83eeb7bfcd9defabbcb23423de906f8f4cc19c1865de80dc5ca687d9c67f0dcc618a6f4ab6d7f56544f9f05e4070118f0ef6d2365c3cfebdab1c3722f5211a22f933fd13976e20fe6eb13f516dd632e41a6d15dd82f3254d7f0a1269dc491d065070a89b9b2b054d5922a41a968f83261ee38ac3021ad17471ae56bcc88ed79d2b934fda04f2866c7a9e3cda5a715437ae6c285aac3b57d9940993fdbcf9a0ad07a01a622dda7526c3d18ea0bc39846a801eb81c6aafa67649f006cc5e702111323c4d29f9c8887fb418877c48a4578eebb793179b94ec6507d6acc7044f9d7507a5fdb2eb56dffb625fff4618c97f335d2f0252db374f1825c51e475572b17df4a2cd0e814cf47988df8a302b4138a2586f571b572c361f04079fdbb2be7897d31c72ae13d48a52144b76a7a1d6c866e32d0b5e5744796a2ff79c3cc6a01012bd3905bea510e2a7ccd7ff4e0db9fdbdcdfd57fdfc10fac6200a60052ddc7bc2a87bb5f62c0f022311b63693a1e36bb5f4629a09d8f9dae7a66810731417a3c143c172dec7d03167ee95f46dafa22329aff808f9367eb42e96657526d009dd829bdf8a9274fdd38949363f7bde1ed240841a4327aa6c9124c0e62f64711202862a88579277fa41da15fb632925c71c9c0a1418779e089e8f2efd8c4940ed448f7616033718d8e4f8a1ad508ee3faa51bca50a985746df6455909fdf34fa7f725f0559ca650c39e99e17b0905ade283f095d047a9171853b43afb7b4a09eab997aa2202f7335f23ceaa4268fdfa6e7b11ea724de7d01b76187ffec989bd28356332099ae84c6a28fb2f98b10f0ce699b8762281967daba642421696b0f1b5ea63dc4eb48f3face8378cc567a2b31f21aa55a095a533bfb8c713fa1e195f4ca7fdf437e90bd8605c02a30b0cc0bafe2ed868fb37f8ff88ede6699961433aa6e0748fa6dd175fa70cb6a9cc7a91b12e78b9deaeb7dce19cd5142e1035cca7d66926bd5f13f4777db27eb09c7af9e3e1c66f5853acc478d9533141d90fdb4ae09ea9f2698758631748b5a3080f722b812f989241b566faa65a6339fa39045b770d7358b48515eff2daa7665ace44243f8ee2f970829a5638043388469c012a195fa13a3d9d1c7a6d9bcbc2a03dd7b313478b2ba7c5024f8003d8db861a0f2309ff9755b4aa06f14c8810f1a5425ecabf69185b51574368cdce29de7f5b28def5e88120117732c4f93fbf266d21053608aaab6f02c2afe0e2caba623e5153d0a447fbca4c52e3718aaa7575a77d32949cac3d7df38bee198f543abe1ce35015c9cc6f5f40e911ee7e006409f6bc092e69e5185605213648000bf585b355b5421a2d97a388494061a402596091db5dfe51935f46f48955e0fc53eed9f2b0cc78e538283d1553f40addff96e4b067b9feda6802e35540a9286e5e1793d0ff54adb13851e9379691e06081c2324467dfee2b0724c7b8b3c524001b8410838687b92c5f4756816ee29d521754fdb72b624bf04ac69d7c1de066d09fdf0924fda5202457f131cc2cf39ce957ae5df121354bac874d2b9b03dfeffa9097ab40ba34ae66a16ca3e5bd7d87c574777d15d41bf33a4476a84c5fc9eb891a5e32a40e7623669e546523cadf94bd895e1a664097aa81f2dcb13d76933155fba3694a3bf85315674cf3ac825eb658ebe89dafc537b5b7b2c542064db6537ea8499a335fe87c3058968686ce2bec8a8ac906fe0540bf9d8c6a0ee586935a7f34a89505d2bb2c50a3b5da13bad40cd67b94c4ad34edfbfe1651309545fa2029bec992c3f79ce5cc596aea8781833ac4de42f22789050ad7e90d2846fd84a9cf7f5e1ace5e9a21b82a6f08dba6ddaeaf054051460163da9fb5deffa4757011b62b5cd91bb9e2698702109c2b27d2dfb1fb9cda616335ff43cf065e90e837a40bf487aaeea160c166d18ade9029252f98390a7485e3f76bd3f75f8f7afa89f372c575fcbfc192e011b677f677c5085e15a01d8a5df91e658004d961ad8eac72728e598ed5b133fefc5465755d3ffcf9d5d7e4df39f4dbba0abcc293b09f8c4987729ff3fdc595269b43847bb13076a273b42c590e8abec6af5ee1c695c0a085edcbe5aeec6189e3ed0f21af4fb3fc5bf93c2f5ac2b693d8e3307637c8cd0285daf50cab760d2957f79278bee8a1b73a2c8ce8d81a98b43d598c453d100c2fb0295fe676eeb41d8c3975c9e2e7f7a56f383961b62f1711188b1faac2a885b7d9444e838d1c7fc016c997a738c5427e3ac9a7340158eade7d21dc9b194b21f804e5866862e6986636e35be63acaeff633dbb81387ad0b1677834196c607bf613dab350e8b09f3641d75754dcad3d91d525e20572be8882172fb3b5e16d9e87713a20e68c196df733fb4bbe3dcabfb2e5b52b0c681f84bc4684e08a807594182915b8fbab4edf72a598798483b715624c928a1cbff63b3665efe0823961585b8bbac5a72d0cc9b5f3d1e6aee5e8ee13dda29cc222c644bf9411098572dee73d82e06fcc6d9393fdbb29f1e84b21dec0e3063ae777d51b95bf0702a268d31e4bccef2227e609ec17743a30b4b2a615b3c9c106b963d389a468327b69901e417107250920a3fa724288fbfd1de17be66e57069d8a05a5fb370f78ab5be194810ec2b2cbda7b83d43fd6b0bb13dcb4c7246e8c7fe95aa5854a87614406048ffc122c32cec7583623c2088095483836b7966bba8bbbf1f3160b04a1800ae1a3dd7ded3b254d095aa6f1b901403243b7826039c30a801fa8fecabebb13de1281d2b9e1fa84286f2613f0a3c41d84daf2bf4d166f290c44b709cd216351201f2433be9d992e967d4dee8a14061fea03e578f2cf376f2bf2c48f52a0dde92d55b19a83791ba9635b7b66c6879f3e2d525ceaeea646b67507b53c7c4077620dd31feb1de45d3bc5dea57df661486d2bd83855c909c4a108e720d90505061b1000000100000000000000405ae60f587e4393aba10f8f3d0fc214b7f68bfbb79268ca19831c796d13d6ee0928bd612676744a67ef408f2b3000608c45a8d31defb28c4adf2916a3ec80b87d0000002006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f061b100000010000000000006328701b01010000009000000000000003e80000000000000064000000000000000a01000000003b9aca000000000000000000"
        )
        val state = Serialization.deserialize(bin, TestConstants.Alice.nodeParams)
        assertTrue(state is Normal)
        assertEquals(state.commitments.channelConfig, ChannelConfig.standard)
        assertEquals(state.commitments.channelFeatures, ChannelFeatures(setOf(Feature.StaticRemoteKey, Feature.AnchorOutputs, Feature.Wumbo, Feature.ZeroReserveChannels, Feature.ZeroConfChannels)))
    }

    @Test
    fun `maximum number of HTLCs that is safe to use`() {
        val (alice, bob) = TestsHelper.reachNormal()
        assertTrue(bob.commitments.localParams.features.hasFeature(Feature.ChannelBackupClient))

        tailrec fun addHtlcs(sender: Normal, receiver: Normal, amount: MilliSatoshi, count: Int): Pair<Normal, Normal> = if (count == 0) Pair(sender, receiver) else {
            val (p, _) = TestsHelper.addHtlc(amount, sender, receiver)
            val (alice1, bob1) = p
            assertTrue(alice1 is Normal && bob1 is Normal)
            addHtlcs(alice1, bob1, amount, count - 1)
        }

        fun commitSigSize(maxIncoming: Int, maxOutgoing: Int): Int {
            val (alice1, bob1) = addHtlcs(alice, bob, MilliSatoshi(6000_000), maxOutgoing)
            val (bob2, alice2) = addHtlcs(bob1, alice1, MilliSatoshi(6000_000), maxIncoming)
            val (_, actions) = alice2.process(ChannelEvent.ExecuteCommand(CMD_SIGN))
            val commitSig0 = actions.findOutgoingMessage<CommitSig>()

            val (bob3, actions1) = bob2.process(ChannelEvent.MessageReceived(commitSig0))
            val commandSign0 = actions1.findCommand<CMD_SIGN>()

            val (_, actions2) = bob3.process(ChannelEvent.ExecuteCommand(commandSign0))
            val commitSig1 = actions2.findOutgoingMessage<CommitSig>()

            val bina = LightningMessage.encode(commitSig0)
            val binb = LightningMessage.encode(commitSig1)
            return max(bina.size, binb.size)
        }

        // with 6 incoming payments and 6 outgoing payments, we can still add our encrypted backup to commig_sig messages
        assertTrue(commitSigSize(6, 6) < 65000)
    }
}
